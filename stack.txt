class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {
        int i=1,j=1,k=0,as1=0,as2=0;
        ListNode* p=l1;ListNode* s=(ListNode*)malloc(sizeof(ListNode));
        while(p)
        {
            p->val=p->val*i;
            as1=as1+p->val;
            i=i*10;
            k=k+1;
            p=p->next;
        }
        p=l2;
        while(p)
        {
            p->val=p->val*j;
            as1=as1+p->val;
            j=j*10;
            p=p->next;
        }
        as1+=as2;
        p=l1;
        while(p)
        {
            as2=as1%10;
            as1=as1/10;
            k=k-1;
            if(p->next==NULL&&as1!=0)
            {
                p->next=l2;
            }
            p->val=as2;
            if(p->next==NULL&&as1!=0)
            {
                p->next=s;
            }
            if(as1==0)
            {p->next=NULL;break;}
            p=p->next;
            
        }
       
        return l1;
    }
};
Á¬½ÓÓÐÐò×Ö·û´®
class Solution
{
public:
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2)
    {
        if (l1 == nullptr)
        {
            return l2;
        }
        if (l2 == nullptr)
        {
            return l1;
        }
        if (l1->val < l2->val)
        {
            l1->next = mergeTwoLists(l1->next, l2);
            return l1;
        }
        else
        {
            l2->next = mergeTwoLists(l1, l2->next);
            return l2;
        }
    }
};